diff --git a/lib/rubyplot/artist/artist.rb b/lib/rubyplot/artist/artist.rb
index 0a8df83..e8393c7 100644
--- a/lib/rubyplot/artist/artist.rb
+++ b/lib/rubyplot/artist/artist.rb
@@ -46,7 +46,7 @@ module Rubyplot
     def setup_graph_measurements
       @marker_caps_height = calculate_caps_height(@marker_font_size)

-      @title_caps_height = @hide_title || @title.nil? ? 0 :
+      @title_caps_height = @geometry.hide_title || @title.nil? ? 0 :
           calculate_caps_height(@title_font_size) * @title.lines.to_a.size
       # Initially the title is nil.

@@ -63,7 +63,7 @@ module Rubyplot
       end

       # Shift graph if left line numbers are hidden
-      line_number_width = @hide_line_numbers && !@has_left_labels ?
+      line_number_width = @geometry.hide_line_numbers && !@has_left_labels ?
           0.0 :
           (longest_left_label_width + LABEL_MARGIN * 2)

@@ -73,7 +73,7 @@ module Rubyplot

       # Make space for half the width of the rightmost column label.
       last_label = @labels.keys.max.to_i
-      extra_room_for_long_label = last_label >= (@column_count - 1) && @center_labels_over_point ?
+      extra_room_for_long_label = last_label >= (@column_count - 1) && @geometry.center_labels_over_point ?
           calculate_width(@marker_font_size, @labels[last_label]) / 2.0 : 0
       @graph_right_margin = @right_margin + extra_room_for_long_label

@@ -83,8 +83,8 @@ module Rubyplot
       @graph_width = @raw_columns - @graph_left - @graph_right_margin

       # When @hide title, leave a title_margin space for aesthetics.
-      @graph_top = @legend_at_bottom ? @top_margin : (@top_margin +
-          (@hide_title ? title_margin : @title_caps_height + title_margin) +
+      @graph_top = @geometry.legend_at_bottom ? @top_margin : (@top_margin +
+          (@geometry.hide_title ? title_margin : @title_caps_height + title_margin) +
           (@legend_caps_height + legend_margin))

       x_axis_label_height = @geometry.x_axis_label .nil? ? 0.0 :
@@ -127,7 +127,7 @@ module Rubyplot

     # Draws a title on the graph.
     def draw_title
-      return if @hide_title || @title.nil?
+      return if @geometry.hide_title || @title.nil?

       @d.fill = @font_color
       @d.font = @title_font || @font if @title_font || @font
@@ -147,7 +147,7 @@ module Rubyplot
     def draw_legend
       @legend_labels = @data.collect { |item| item[DATA_LABEL_INDEX] }

-      legend_square_width = @legend_box_size # small square with color of this item
+      legend_square_width = @legend_box_size # small square with color of this item

       # May fix legend drawing problem at small sizes
       @d.font = @font if @font
@@ -165,7 +165,7 @@ module Rubyplot
       end

       current_x_offset = center(sum(label_widths.first))
-      current_y_offset = @legend_at_bottom ? @graph_height + title_margin : (@hide_title ?
+      current_y_offset = @geometry.legend_at_bottom ? @graph_height + title_margin : (@geometry.hide_title ?
           @top_margin + title_margin :
           @top_margin + title_margin + @title_caps_height)

@@ -219,7 +219,7 @@ module Rubyplot

     # Draws horizontal background lines and labels
     def draw_line_markers!
-      return if @hide_line_markers
+      return if @geometry.hide_line_markers

       @d = @d.stroke_antialias false

@@ -260,7 +260,7 @@ module Rubyplot
         marker_label = BigDecimal(index.to_s) * BigDecimal(@increment.to_s) +
                        BigDecimal(@minimum_value.to_s)

-        next if @hide_line_numbers
+        next if @geometry.hide_line_numbers
         @d.fill = @font_color
         @d.font = @font if @font
         @d.stroke('transparent')
@@ -287,7 +287,7 @@ module Rubyplot

     # Draws column labels below graph, centered over x_offset
     def draw_label(x_offset, index)
-      return if @hide_line_markers
+      return if @geometry.hide_line_markers

       if !@labels[index].nil? && @labels_seen[index].nil?
         y_offset = @graph_bottom + LABEL_MARGIN
@@ -301,12 +301,12 @@ module Rubyplot
         # TESTME
         # FIXME: Consider chart types other than bar
         if label_text.size > @label_max_size
-          if @label_truncation_style == :trailing_dots
+          if @geometry.label_truncation_style == :trailing_dots
             if @label_max_size > 3
               # 4 because '...' takes up 3 chars
               label_text = "#{label_text[0..(@label_max_size - 4)]}..."
             end
-          else # @label_truncation_style is :absolute (default)
+          else # @geometry.label_truncation_style is :absolute (default)
             label_text = label_text[0..(@label_max_size - 1)]
           end
